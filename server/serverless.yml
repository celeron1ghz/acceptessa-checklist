service: acceptessa-checklist
variablesResolutionMode: 20210326

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-northeast-1
  deploymentBucket: serverless-upload-ap-northeast-1
  versionFunctions: false

  iam:
    role:
      statements:
        - Effect: Allow
          Action: [ssm:GetParameter]
          Resource:
            - Fn::Join: [ ":", ["arn:aws:ssm", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "parameter/tessa_checklist/*"]]
        - Effect: Allow
          Action: [dynamodb:GetItem, dynamodb:PutItem, dynamodb:DeleteItem]
          Resource:
            - Fn::Join: [ ":", ["arn:aws:dynamodb", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "table/tessa_session"]]
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:BatchGetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::Join: [ ":", ["arn:aws:dynamodb", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "table/tessa_favorite"]]
            - Fn::Join: [ ":", ["arn:aws:dynamodb", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "table/tessa_favorite/index/*"]]
            - Fn::Join: [ ":", ["arn:aws:dynamodb", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "table/tessa_config"]]
        - Effect: Allow
          Action: [dynamodb:GetItem, dynamodb:UpdateItem]
          Resource:
            - Fn::Join: [ ":", ["arn:aws:dynamodb", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "table/tessa_favorite_count"]]
        - Effect: Allow
          Action: [s3:PutObject]
          Resource:
            - Fn::Join: [ "", [{ Fn::GetAtt: [ExportBucket, Arn]}, "/*"]]

functions:
  endpoint:
    handler: handler.endpoint
    description: tessa checklist application
    events: [{ http: { path: "/api/endpoint", method: post, cors: true } }]
    environment:
      S3BUCKET_PUBLIC_URL: { Fn::GetAtt: [ExportBucket, DomainName] }
  public:
    handler: handler.public
    description: tessa checklist public endpoint
    events: [{ http: { path: "/api/public/{eid}/", method: get, cors: true } }]
  auth:
    handler: handler.auth
    description: tessa checklist authentication
    events: [{ http: { path: "/api/auth/{action}", method: get, cors: true } }]
    environment:
      SERVE_HOST: "checklist.familiar-life.info"
  stream:
    handler: handler.stream
    events:
      - stream:
          type: dynamodb
          arn: { Fn::GetAtt: [FavoriteTable, StreamArn] }

resources:
  Description: Acceptessa checklist api
  Resources:
    IamRoleLambdaExecution:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "${self:service}"

    ExportBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${self:service}-export"
        WebsiteConfiguration:
          ErrorDocument: error.html
          IndexDocument: index.html

    ExportBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: { Ref: ExportBucket }
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action: ["s3:GetObject"]
              Resource: { Fn::Join: [ "", [{ Fn::GetAtt: [ExportBucket, Arn] }, "/*" ]] }
              Principal: "*"

    ## tables
    FavoriteTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tessa_favorite
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - { AttributeName: member_id,     AttributeType: S }
          - { AttributeName: circle_id,     AttributeType: S }
          - { AttributeName: exhibition_id, AttributeType: S }
        KeySchema:
          - { AttributeName: member_id,     KeyType: HASH }
          - { AttributeName: circle_id,     KeyType: RANGE }
        GlobalSecondaryIndexes:
          - IndexName: tessa_favorite_gsi
            KeySchema:
              - { AttributeName: member_id,     KeyType: HASH }
              - { AttributeName: exhibition_id, KeyType: RANGE }
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    ConfigTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tessa_config
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - { AttributeName: member_id,     AttributeType: S }
          - { AttributeName: exhibition_id, AttributeType: S }
        KeySchema:
          - { AttributeName: member_id,     KeyType: HASH }
          - { AttributeName: exhibition_id, KeyType: RANGE }

    SessionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tessa_session
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - { AttributeName: uid, AttributeType: S }
        KeySchema:
          - { AttributeName: uid, KeyType: HASH }
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    CountTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tessa_favorite_count
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - { AttributeName: circle_id, AttributeType: S }
        KeySchema:
          - { AttributeName: circle_id, KeyType: HASH }

    ## alarms
    # WCUAlarm:
    #   Type: AWS::CloudWatch::Alarm
    #   Properties:
    #     AlarmName: "acceptessa-checklist-tessa_favorite-dynamodb-wcu"
    #     AlarmDescription: "DynamoDB WCU alarm for acceptessa-checklist"
    #     ComparisonOperator: GreaterThanOrEqualToThreshold
    #     Dimensions:
    #       - { Name: TableName, Value: { Ref: FavoriteTable } }
    #     EvaluationPeriods: 1
    #     MetricName: ConsumedWriteCapacityUnits
    #     Namespace: AWS/DynamoDB
    #     Period: 60
    #     Statistic: Maximum
    #     Threshold: 60
    #     TreatMissingData: notBreaching
    #     AlarmActions:
    #       - Fn::Join: [ ":", ["arn:aws:sns", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "aws-slack-notifier"]]
    #     OKActions:
    #       - Fn::Join: [ ":", ["arn:aws:sns", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "aws-slack-notifier"]]

    # RCUAlarm:
    #   Type: AWS::CloudWatch::Alarm
    #   Properties:
    #     AlarmName: "acceptessa-checklist-tessa_favorite-dynamodb-rcu"
    #     AlarmDescription: "DynamoDB RCU alarm for acceptessa-checklist"
    #     ComparisonOperator: GreaterThanOrEqualToThreshold
    #     Dimensions:
    #       - { Name: TableName, Value: { Ref: FavoriteTable } }
    #     EvaluationPeriods: 1
    #     MetricName: ConsumedReadCapacityUnits
    #     Namespace: AWS/DynamoDB
    #     Period: 60
    #     Statistic: Maximum
    #     Threshold: 60
    #     TreatMissingData: notBreaching
    #     AlarmActions:
    #       - Fn::Join: [ ":", ["arn:aws:sns", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "aws-slack-notifier"]]
    #     OKActions:
    #       - Fn::Join: [ ":", ["arn:aws:sns", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "aws-slack-notifier"]]

    ## api domain setting
    Domain:
      Type: AWS::ApiGateway::DomainName
      Properties:
        CertificateArn: "${ssm:/tessa_checklist/acm_cert_arn}"
        DomainName: "api.familiar-life.info"

    Mapping:
      Type: AWS::ApiGateway::BasePathMapping
      Properties:
        DomainName: { Ref: Domain }
        RestApiId:  { Ref: ApiGatewayRestApi }
        Stage: dev

    RecordSetOfAPI:
      Type: AWS::Route53::RecordSet
      Properties:
        Name: "api.familiar-life.info"
        Type: A
        HostedZoneName: "familiar-life.info."
        AliasTarget:
          DNSName: !GetAtt Domain.DistributionDomainName
          HostedZoneId: Z2FDTNDATAQYW2

    ## static file domain setting
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${self:service}"
        CorsConfiguration:
          CorsRules:
            - AllowedMethods: ['GET']
              AllowedOrigins: ['*']
              AllowedHeaders: ['*']

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: { Ref: Bucket }
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: s3:GetObject
              Principal:
                AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}
              Resource:
                Fn::Join: [ "/", [ !GetAtt [ Bucket, Arn ] , "*" ] ]

    Cloudfront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: acceptessa checklist
          Aliases: ["checklist.familiar-life.info"]
          HttpVersion: http2
          ViewerCertificate:
            AcmCertificateArn: "${ssm:/tessa_checklist/acm_cert_arn}"
            SslSupportMethod: sni-only
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            TargetOriginId: s3
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: true
              Headers: ["Origin"]
            MinTTL: 43200 ## 12 hour
            MaxTTL: 43200
            DefaultTTL: 43200
          CacheBehaviors:
            - PathPattern: /api/*
              AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
              CachedMethods: [GET, HEAD]
              TargetOriginId: api_auth
              ViewerProtocolPolicy: redirect-to-https
              ForwardedValues:
                Cookies:
                  Forward: whitelist
                  WhitelistedNames: ['sessid']
                QueryString: true
                Headers: ["Origin"]
              MinTTL: 0
              MaxTTL: 0
              DefaultTTL: 0
          Enabled: true
          Origins:
            - Id: s3
              DomainName: !GetAtt Bucket.DomainName
              S3OriginConfig:
                OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
            - Id: api_auth
              DomainName: { Fn::Join: ["", [{ Ref:  ApiGatewayRestApi }, ".execute-api.ap-northeast-1.amazonaws.com" ]] }
              OriginPath: /dev
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
                OriginSSLProtocols: [TLSv1.1, TLSv1.2]

    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Ref AWS::StackName

    RecordSetOfAssets:
      Type: AWS::Route53::RecordSet
      Properties:
        Name: "checklist.familiar-life.info"
        Type: A
        HostedZoneName: "familiar-life.info."
        AliasTarget:
          DNSName: !GetAtt Cloudfront.DomainName
          HostedZoneId: Z2FDTNDATAQYW2
